name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
        
    - name: Create deployment package
      run: |
        # Create a deployment package excluding unnecessary files
        # Use a temporary directory to avoid tar including itself
        mkdir -p /tmp/deploy
        cp -r . /tmp/deploy/minestrike
        
        # Remove unnecessary files from the copy
        rm -rf /tmp/deploy/minestrike/.git
        rm -rf /tmp/deploy/minestrike/.github
        rm -rf /tmp/deploy/minestrike/server/logs
        rm -rf /tmp/deploy/minestrike/server/cache
        rm -rf /tmp/deploy/minestrike/server/libraries
        rm -rf /tmp/deploy/minestrike/server/versions
        rm -rf /tmp/deploy/minestrike/server/server.jar
        rm -rf /tmp/deploy/minestrike/logs
        find /tmp/deploy/minestrike -name "*.log" -delete
        find /tmp/deploy/minestrike -name ".DS_Store" -delete
        find /tmp/deploy/minestrike -name "*.tmp" -delete
        find /tmp/deploy/minestrike -name "*.backup" -delete
        
        # Create the tar file
        cd /tmp/deploy
        tar -czf minestrike-deploy.tar.gz minestrike/
        
        # Move it back to the working directory
        mv minestrike-deploy.tar.gz $GITHUB_WORKSPACE/
          
    - name: Upload deployment package to EC2
      run: |
        scp -i ~/.ssh/id_rsa minestrike-deploy.tar.gz $EC2_USER@$EC2_HOST:/tmp/
        
    - name: Deploy on EC2
      run: |
        ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST << 'EOF'
          set -e
          
          echo "🚀 Starting fresh EC2 deployment..."
          
          # Update system packages
          echo "📦 Updating system packages..."
          sudo apt update
          sudo apt upgrade -y
          sudo apt install -y curl wget screen netcat-openbsd unzip
          
          # Install Java 17 if not present
          echo "☕ Installing Java 17..."
          if ! java -version 2>&1 | grep -q "17\|18\|19\|20\|21\|22"; then
            sudo apt install -y openjdk-17-jdk
          fi
          
          # Create minecraft user if not exists
          echo "👤 Creating minecraft user..."
          if ! id minecraft &>/dev/null; then
            sudo useradd -r -s /bin/bash -d /opt/minecraft minecraft
          fi
          
          # Create directory structure
          echo "📁 Creating directory structure..."
          sudo mkdir -p /opt/minecraft/server
          sudo mkdir -p /opt/minecraft/logs
          sudo mkdir -p /opt/minecraft/scripts
          sudo mkdir -p /opt/backups
          sudo mkdir -p /opt/minecraft/server/mods
          sudo mkdir -p /opt/minecraft/server/plugins
          sudo mkdir -p /opt/minecraft/server/world
          sudo mkdir -p /opt/minecraft/server/config
          
        # Extract new deployment
        echo "📦 Extracting deployment package..."
        cd /tmp
        tar -xzf minestrike-deploy.tar.gz
        
        # Debug: List what was extracted
        echo "🔍 Debug: Contents of extracted package:"
        ls -la minestrike/
        echo "🔍 Debug: Contents of scripts directory:"
        ls -la minestrike/scripts/ || echo "❌ scripts directory not found!"
        
        # Deploy server files
        echo "🚀 Deploying server files..."
        sudo cp -r minestrike/scripts/ /opt/minecraft/
        sudo cp -r minestrike/server/ /opt/minecraft/
          
          # Download Paper server
          echo "📥 Downloading Paper server..."
          cd /opt/minecraft/server
          PAPER_VERSION="1.20.4"
          PAPER_BUILD=$(curl -s "https://api.papermc.io/v2/projects/paper/versions/$PAPER_VERSION" | grep -o '"builds":\[[^]]*\]' | grep -o '[0-9]*' | tail -1)
          DOWNLOAD_URL="https://api.papermc.io/v2/projects/paper/versions/$PAPER_VERSION/builds/$PAPER_BUILD/downloads/paper-$PAPER_VERSION-$PAPER_BUILD.jar"
          sudo -u minecraft curl -L -o server.jar "$DOWNLOAD_URL"
          
          # Set ownership
          echo "🔐 Setting file ownership..."
          sudo chown -R minecraft:minecraft /opt/minecraft/
          sudo chown -R minecraft:minecraft /opt/backups/
          
          # Setup systemd service
          echo "⚙️ Setting up systemd service..."
          sudo cp /tmp/scripts/minecraft-server.service /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable minecraft-server
          
          # Configure firewall
          echo "🔥 Configuring firewall..."
          sudo ufw --force enable
          sudo ufw allow 22/tcp
          sudo ufw allow 25565/tcp
          sudo ufw allow 25575/tcp
          
          # Start the server
          echo "🎮 Starting Minecraft server..."
          sudo systemctl start minecraft-server
          
          # Wait and check status
          sleep 10
          echo "📊 Server status:"
          sudo systemctl status minecraft-server --no-pager

          # Clean up
          rm -f /tmp/minestrike-deploy.tar.gz
          rm -rf /tmp/scripts /tmp/server

          echo "✅ Fresh deployment completed successfully!"
          echo "🌐 External IP: $(curl -s ifconfig.me)"
        EOF

    - name: Verify deployment
      run: |
        ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST << 'EOF'
          echo "🔍 Verifying fresh deployment..."

          # Check if server is running
          if sudo systemctl is-active --quiet minecraft-server; then
            echo "✅ Server is running"
          else
            echo "❌ Server is not running"
            sudo systemctl status minecraft-server --no-pager
            exit 1
          fi
          
          # Test port accessibility
          if nc -z localhost 25565; then
            echo "✅ Port 25565 is accessible"
          else
            echo "❌ Port 25565 is not accessible"
            exit 1
          fi
          
          # Show server info
          echo "📊 Server information:"
          sudo systemctl status minecraft-server --no-pager -l
          
          # Show external IP
          echo "🌐 External IP: $(curl -s ifconfig.me)"
          
          # Show directory structure
          echo "📁 Directory structure:"
          ls -la /opt/minecraft/
          
          echo "🎮 Minecraft server is ready!"
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment successful! Server is running on $EC2_HOST:25565"
        else
          echo "❌ Deployment failed. Check the logs above."
        fi
